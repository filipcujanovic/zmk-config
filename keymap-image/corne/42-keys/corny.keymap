/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJUST  3

#define HYPER(key) LS(LC(LA(LG(key))))

&mt {
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
};

/ {
    behaviors {
        shifty: shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp LSHIFT >, <&caps_word>;
        };
        esc_tab: gaming_esc_tab {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp ESC>, <&kp TAB>;
        };
        layer_alt: gaming_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp LALT>, <&tog GAMING>;
        };
    };
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
&kp ESC       &kp Q  &kp W    &kp E      &kp R     &kp T                                   &kp Y      &kp U     &kp I     &kp O    &kp P    &kp BSPC
&mt LCTRL TAB &kp A  &kp S    &kp D      &kp F     &kp G                                   &kp H      &kp J     &kp K     &kp L    &kp SEMI &kp SQT
&shifty       &kp Z  &kp X    &kp C      &kp V     &kp B      &none             &none      &kp N      &kp M     &kp COMMA &kp DOT  &kp FSLH &kp RALT
                                         &kp LGUI   &mo LOWER &kp RET           &kp SPACE  &mo RAISE  &kp RGUI
            >;
        };

        lower_layer {
            bindings = <
&kp GRAVE &kp N1    &kp N2    &kp N3      &kp N4    &kp N5                                  &kp N6    &kp N7   &kp N8          &kp N9    &kp N0    &trans
&trans    &kp EXCL  &kp AT    &kp HASH    &kp DLLR  &kp PRCNT                               &kp CARET &kp AMPS &kp KP_MULTIPLY &kp LPAR  &kp RPAR  &kp PIPE
&trans    &kp EQUAL &kp MINUS &kp KP_PLUS &kp LBRC  &kp RBRC  &none                &none    &kp LBKT  &kp RBKT &kp SEMI        &kp COLON &kp BSLH  &kp UNDERSCORE
                                          &trans    &trans    &trans               &trans   &trans    &trans
            >;
        };

        raise_layer {
            bindings = <
&none      &none           &none         &none              &none             &none                      &kp C_PREVIOUS &kp C_VOLUME_DOWN    &kp C_VOLUME_UP      &kp C_NEXT  &kp C_PLAY_PAUSE &none
&trans     &kp HYPER(N1)   &kp HYPER(N2) &kp LG(LS(N4))     &kp LG(LS(N5))    &kp CLCK                   &kp LEFT       &kp DOWN             &kp UP               &kp RIGHT   &kp DEL          &kp BSPC
&trans     &none           &none         &none              &none             &trans    &none    &none   &none          &kp C_BRIGHTNESS_DEC &kp C_BRIGHTNESS_INC &none       &none            &trans
                                                            &trans            &trans    &trans   &trans  &trans      &trans
            >;
        };

        adjust_layer {
            bindings = <
&ext_power EP_OFF  &none           &none           &none            &none              &none                         &none   &kp N7  &kp N8  &kp N9  &none  &none
&bt BT_CLR         &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2     &bt BT_SEL 3       &bt BT_SEL 4                  &kp N0  &kp N4  &kp N5  &kp N6  &none  &none
&none              &none           &none           &none            &none              &none        &none    &none   &none   &kp N1  &kp N2  &kp N3 &none   &none
                                                                    &trans             &trans       &trans   &trans  &trans  &trans
            >;
        };
    };
};
